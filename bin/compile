#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# Ensure wildcards in globs match dotfiles too.
shopt -s dotglob

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}

if [ -f $ENV_DIR/PROJECT_PATH ]; then
	PROJECT_PATH=`cat $ENV_DIR/PROJECT_PATH`
	if [ -d $BUILD_DIR/$PROJECT_PATH ]; then
	  # First we need to materialize symlinks
	  MATERIALIZE_SYMLINKS=`cat $ENV_DIR/MATERIALIZE_SYMLINKS`
    if [ "$MATERIALIZE_SYMLINKS" == "true" ]; then
      echo "       materializing symlinks"
      for symlink in `find $BUILD_DIR/$PROJECT_PATH -type l`; do
        target=`readlink -f $symlink`
        if [ -z "$target" ]; then
          echo "       skipping broken symlink $symlink -> $target"
        elif [[ $target == $BUILD_DIR/$PROJECT_PATH* ]]; then
          echo "       skipping symlink, it is inside the project path $symlink -> $target"
        else
          cp --remove-destination --dereference "$target" "$symlink"
        fi
      done
    fi

		echo "-----> Subdir buildpack in $PROJECT_PATH"
		echo "       creating cache: $CACHE_DIR"
		mkdir -p $CACHE_DIR
		TMP_DIR=`mktemp -d $CACHE_DIR/subdirXXXXX`
		echo "       created tmp dir: $TMP_DIR"
		echo "       moving working dir: $PROJECT_PATH to $TMP_DIR"
		cp -R $BUILD_DIR/$PROJECT_PATH/. $TMP_DIR/
	 	echo "       cleaning build dir $BUILD_DIR"
		rm -rf $BUILD_DIR/*
		echo "       copying preserved work dir from cache $TMP_DIR to build dir $BUILD_DIR"
		cp -R $TMP_DIR/. $BUILD_DIR/
		echo "       cleaning tmp dir $TMP_DIR"
		rm -rf $TMP_DIR
		exit 0
	fi
fi

echo "PROJECT_PATH is undefined"
exit 1


